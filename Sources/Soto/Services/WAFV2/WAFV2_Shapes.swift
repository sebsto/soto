//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension WAFV2 {
    // MARK: Enums

    public enum BodyParsingFallbackBehavior: String, CustomStringConvertible, Codable {
        case evaluateAsString = "EVALUATE_AS_STRING"
        case match = "MATCH"
        case noMatch = "NO_MATCH"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case eq = "EQ"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case ne = "NE"
        public var description: String { return self.rawValue }
    }

    public enum CountryCode: String, CustomStringConvertible, Codable {
        case ad = "AD"
        case ae = "AE"
        case af = "AF"
        case ag = "AG"
        case ai = "AI"
        case al = "AL"
        case am = "AM"
        case ao = "AO"
        case aq = "AQ"
        case ar = "AR"
        case `as` = "AS"
        case at = "AT"
        case au = "AU"
        case aw = "AW"
        case ax = "AX"
        case az = "AZ"
        case ba = "BA"
        case bb = "BB"
        case bd = "BD"
        case be = "BE"
        case bf = "BF"
        case bg = "BG"
        case bh = "BH"
        case bi = "BI"
        case bj = "BJ"
        case bl = "BL"
        case bm = "BM"
        case bn = "BN"
        case bo = "BO"
        case bq = "BQ"
        case br = "BR"
        case bs = "BS"
        case bt = "BT"
        case bv = "BV"
        case bw = "BW"
        case by = "BY"
        case bz = "BZ"
        case ca = "CA"
        case cc = "CC"
        case cd = "CD"
        case cf = "CF"
        case cg = "CG"
        case ch = "CH"
        case ci = "CI"
        case ck = "CK"
        case cl = "CL"
        case cm = "CM"
        case cn = "CN"
        case co = "CO"
        case cr = "CR"
        case cu = "CU"
        case cv = "CV"
        case cw = "CW"
        case cx = "CX"
        case cy = "CY"
        case cz = "CZ"
        case de = "DE"
        case dj = "DJ"
        case dk = "DK"
        case dm = "DM"
        case `do` = "DO"
        case dz = "DZ"
        case ec = "EC"
        case ee = "EE"
        case eg = "EG"
        case eh = "EH"
        case er = "ER"
        case es = "ES"
        case et = "ET"
        case fi = "FI"
        case fj = "FJ"
        case fk = "FK"
        case fm = "FM"
        case fo = "FO"
        case fr = "FR"
        case ga = "GA"
        case gb = "GB"
        case gd = "GD"
        case ge = "GE"
        case gf = "GF"
        case gg = "GG"
        case gh = "GH"
        case gi = "GI"
        case gl = "GL"
        case gm = "GM"
        case gn = "GN"
        case gp = "GP"
        case gq = "GQ"
        case gr = "GR"
        case gs = "GS"
        case gt = "GT"
        case gu = "GU"
        case gw = "GW"
        case gy = "GY"
        case hk = "HK"
        case hm = "HM"
        case hn = "HN"
        case hr = "HR"
        case ht = "HT"
        case hu = "HU"
        case id = "ID"
        case ie = "IE"
        case il = "IL"
        case im = "IM"
        case `in` = "IN"
        case io = "IO"
        case iq = "IQ"
        case ir = "IR"
        case `is` = "IS"
        case it = "IT"
        case je = "JE"
        case jm = "JM"
        case jo = "JO"
        case jp = "JP"
        case ke = "KE"
        case kg = "KG"
        case kh = "KH"
        case ki = "KI"
        case km = "KM"
        case kn = "KN"
        case kp = "KP"
        case kr = "KR"
        case kw = "KW"
        case ky = "KY"
        case kz = "KZ"
        case la = "LA"
        case lb = "LB"
        case lc = "LC"
        case li = "LI"
        case lk = "LK"
        case lr = "LR"
        case ls = "LS"
        case lt = "LT"
        case lu = "LU"
        case lv = "LV"
        case ly = "LY"
        case ma = "MA"
        case mc = "MC"
        case md = "MD"
        case me = "ME"
        case mf = "MF"
        case mg = "MG"
        case mh = "MH"
        case mk = "MK"
        case ml = "ML"
        case mm = "MM"
        case mn = "MN"
        case mo = "MO"
        case mp = "MP"
        case mq = "MQ"
        case mr = "MR"
        case ms = "MS"
        case mt = "MT"
        case mu = "MU"
        case mv = "MV"
        case mw = "MW"
        case mx = "MX"
        case my = "MY"
        case mz = "MZ"
        case na = "NA"
        case nc = "NC"
        case ne = "NE"
        case nf = "NF"
        case ng = "NG"
        case ni = "NI"
        case nl = "NL"
        case no = "NO"
        case np = "NP"
        case nr = "NR"
        case nu = "NU"
        case nz = "NZ"
        case om = "OM"
        case pa = "PA"
        case pe = "PE"
        case pf = "PF"
        case pg = "PG"
        case ph = "PH"
        case pk = "PK"
        case pl = "PL"
        case pm = "PM"
        case pn = "PN"
        case pr = "PR"
        case ps = "PS"
        case pt = "PT"
        case pw = "PW"
        case py = "PY"
        case qa = "QA"
        case re = "RE"
        case ro = "RO"
        case rs = "RS"
        case ru = "RU"
        case rw = "RW"
        case sa = "SA"
        case sb = "SB"
        case sc = "SC"
        case sd = "SD"
        case se = "SE"
        case sg = "SG"
        case sh = "SH"
        case si = "SI"
        case sj = "SJ"
        case sk = "SK"
        case sl = "SL"
        case sm = "SM"
        case sn = "SN"
        case so = "SO"
        case sr = "SR"
        case ss = "SS"
        case st = "ST"
        case sv = "SV"
        case sx = "SX"
        case sy = "SY"
        case sz = "SZ"
        case tc = "TC"
        case td = "TD"
        case tf = "TF"
        case tg = "TG"
        case th = "TH"
        case tj = "TJ"
        case tk = "TK"
        case tl = "TL"
        case tm = "TM"
        case tn = "TN"
        case to = "TO"
        case tr = "TR"
        case tt = "TT"
        case tv = "TV"
        case tw = "TW"
        case tz = "TZ"
        case ua = "UA"
        case ug = "UG"
        case um = "UM"
        case us = "US"
        case uy = "UY"
        case uz = "UZ"
        case va = "VA"
        case vc = "VC"
        case ve = "VE"
        case vg = "VG"
        case vi = "VI"
        case vn = "VN"
        case vu = "VU"
        case wf = "WF"
        case ws = "WS"
        case ye = "YE"
        case yt = "YT"
        case za = "ZA"
        case zm = "ZM"
        case zw = "ZW"
        public var description: String { return self.rawValue }
    }

    public enum FallbackBehavior: String, CustomStringConvertible, Codable {
        case match = "MATCH"
        case noMatch = "NO_MATCH"
        public var description: String { return self.rawValue }
    }

    public enum ForwardedIPPosition: String, CustomStringConvertible, Codable {
        case any = "ANY"
        case first = "FIRST"
        case last = "LAST"
        public var description: String { return self.rawValue }
    }

    public enum IPAddressVersion: String, CustomStringConvertible, Codable {
        case ipv4 = "IPV4"
        case ipv6 = "IPV6"
        public var description: String { return self.rawValue }
    }

    public enum JsonMatchScope: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case key = "KEY"
        case value = "VALUE"
        public var description: String { return self.rawValue }
    }

    public enum PositionalConstraint: String, CustomStringConvertible, Codable {
        case contains = "CONTAINS"
        case containsWord = "CONTAINS_WORD"
        case endsWith = "ENDS_WITH"
        case exactly = "EXACTLY"
        case startsWith = "STARTS_WITH"
        public var description: String { return self.rawValue }
    }

    public enum RateBasedStatementAggregateKeyType: String, CustomStringConvertible, Codable {
        case forwardedIp = "FORWARDED_IP"
        case ip = "IP"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case apiGateway = "API_GATEWAY"
        case applicationLoadBalancer = "APPLICATION_LOAD_BALANCER"
        case appsync = "APPSYNC"
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case cloudfront = "CLOUDFRONT"
        case regional = "REGIONAL"
        public var description: String { return self.rawValue }
    }

    public enum TextTransformationType: String, CustomStringConvertible, Codable {
        case cmdLine = "CMD_LINE"
        case compressWhiteSpace = "COMPRESS_WHITE_SPACE"
        case htmlEntityDecode = "HTML_ENTITY_DECODE"
        case lowercase = "LOWERCASE"
        case none = "NONE"
        case urlDecode = "URL_DECODE"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct All: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct AllQueryArguments: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct AllowAction: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct AndStatement: AWSEncodableShape & AWSDecodableShape {
        /// The statements to combine with AND logic. You can use any statements that can be nested.
        public let statements: [Statement]

        public init(statements: [Statement]) {
            self.statements = statements
        }

        public func validate(name: String) throws {
            try self.statements.forEach {
                try $0.validate(name: "\(name).statements[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case statements = "Statements"
        }
    }

    public struct AssociateWebACLRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to associate with the web ACL.  The ARN must be in one of the following formats:   For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id     For an API Gateway REST API: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name     For an AppSync GraphQL API: arn:aws:appsync:region:account-id:apis/GraphQLApiId
        public let resourceArn: String
        /// The Amazon Resource Name (ARN) of the Web ACL that you want to associate with the resource.
        public let webACLArn: String

        public init(resourceArn: String, webACLArn: String) {
            self.resourceArn = resourceArn
            self.webACLArn = webACLArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, max: 2048)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, min: 20)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case webACLArn = "WebACLArn"
        }
    }

    public struct AssociateWebACLResponse: AWSDecodableShape {
        public init() {}
    }

    public struct BlockAction: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct Body: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct ByteMatchStatement: AWSEncodableShape & AWSDecodableShape {
        /// The part of a web request that you want AWS WAF to inspect. For more information, see FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// The area within the portion of a web request that you want AWS WAF to search for SearchString. Valid values include the following:  CONTAINS  The specified part of the web request must include the value of SearchString, but the location doesn't matter.  CONTAINS_WORD  The specified part of the web request must include the value of SearchString, and SearchString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, SearchString must be a word, which means that both of the following are true:    SearchString is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ;BadBot.    SearchString is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, BadBot; and -BadBot;.    EXACTLY  The value of the specified part of the web request must exactly match the value of SearchString.  STARTS_WITH  The value of SearchString must appear at the beginning of the specified part of the web request.  ENDS_WITH  The value of SearchString must appear at the end of the specified part of the web request.
        public let positionalConstraint: PositionalConstraint
        /// A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in FieldToMatch. The maximum length of the value is 50 bytes. Valid values depend on the component that you specify for inspection in FieldToMatch:    Method: The HTTP method that you want AWS WAF to search for. This indicates the type of operation specified in the request.     UriPath: The value that you want AWS WAF to search for in the URI path, for example, /images/daily-ad.jpg.    If SearchString includes alphabetic characters A-Z and a-z, note that the value is case sensitive.  If you're using the AWS WAF API  Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes. For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of SearchString.  If you're using the AWS CLI or one of the AWS SDKs  The value that you want AWS WAF to search for. The SDK automatically base64 encodes the value.
        public let searchString: Data
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        public let textTransformations: [TextTransformation]

        public init(fieldToMatch: FieldToMatch, positionalConstraint: PositionalConstraint, searchString: Data, textTransformations: [TextTransformation]) {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.searchString = searchString
            self.textTransformations = textTransformations
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.textTransformations.forEach {
                try $0.validate(name: "\(name).textTransformations[]")
            }
            try self.validate(self.textTransformations, name: "textTransformations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case positionalConstraint = "PositionalConstraint"
            case searchString = "SearchString"
            case textTransformations = "TextTransformations"
        }
    }

    public struct CheckCapacityRequest: AWSEncodableShape {
        /// An array of Rule that you're configuring to use in a rule group or web ACL.
        public let rules: [Rule]
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(rules: [Rule], scope: Scope) {
            self.rules = rules
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case scope = "Scope"
        }
    }

    public struct CheckCapacityResponse: AWSDecodableShape {
        /// The capacity required by the rules and scope.
        public let capacity: Int64?

        public init(capacity: Int64? = nil) {
            self.capacity = capacity
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
        }
    }

    public struct CountAction: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct CreateIPSetRequest: AWSEncodableShape {
        /// Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all address ranges for IP versions IPv4 and IPv6.  Examples:    To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.   To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.   For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing.
        public let addresses: [String]
        /// A description of the IP set that helps with identification.
        public let description: String?
        /// Specify IPV4 or IPV6.
        public let iPAddressVersion: IPAddressVersion
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// An array of key:value pairs to associate with the resource.
        public let tags: [Tag]?

        public init(addresses: [String], description: String? = nil, iPAddressVersion: IPAddressVersion, name: String, scope: Scope, tags: [Tag]? = nil) {
            self.addresses = addresses
            self.description = description
            self.iPAddressVersion = iPAddressVersion
            self.name = name
            self.scope = scope
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.addresses.forEach {
                try validate($0, name: "addresses[]", parent: name, max: 50)
                try validate($0, name: "addresses[]", parent: name, min: 1)
                try validate($0, name: "addresses[]", parent: name, pattern: ".*\\S.*")
            }
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "Addresses"
            case description = "Description"
            case iPAddressVersion = "IPAddressVersion"
            case name = "Name"
            case scope = "Scope"
            case tags = "Tags"
        }
    }

    public struct CreateIPSetResponse: AWSDecodableShape {
        /// High-level information about an IPSet, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an IPSet, and the ARN, that you provide to the IPSetReferenceStatement to use the address set in a Rule.
        public let summary: IPSetSummary?

        public init(summary: IPSetSummary? = nil) {
            self.summary = summary
        }

        private enum CodingKeys: String, CodingKey {
            case summary = "Summary"
        }
    }

    public struct CreateRegexPatternSetRequest: AWSEncodableShape {
        /// A description of the set that helps with identification.
        public let description: String?
        /// The name of the set. You cannot change the name after you create the set.
        public let name: String
        /// Array of regular expression strings.
        public let regularExpressionList: [Regex]
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// An array of key:value pairs to associate with the resource.
        public let tags: [Tag]?

        public init(description: String? = nil, name: String, regularExpressionList: [Regex], scope: Scope, tags: [Tag]? = nil) {
            self.description = description
            self.name = name
            self.regularExpressionList = regularExpressionList
            self.scope = scope
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.regularExpressionList.forEach {
                try $0.validate(name: "\(name).regularExpressionList[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case regularExpressionList = "RegularExpressionList"
            case scope = "Scope"
            case tags = "Tags"
        }
    }

    public struct CreateRegexPatternSetResponse: AWSDecodableShape {
        /// High-level information about a RegexPatternSet, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RegexPatternSet, and the ARN, that you provide to the RegexPatternSetReferenceStatement to use the pattern set in a Rule.
        public let summary: RegexPatternSetSummary?

        public init(summary: RegexPatternSetSummary? = nil) {
            self.summary = summary
        }

        private enum CodingKeys: String, CodingKey {
            case summary = "Summary"
        }
    }

    public struct CreateRuleGroupRequest: AWSEncodableShape {
        /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit. You can check the capacity for a set of rules using CheckCapacity. AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public let capacity: Int64
        /// A description of the rule group that helps with identification.
        public let description: String?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// An array of key:value pairs to associate with the resource.
        public let tags: [Tag]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(capacity: Int64, description: String? = nil, name: String, rules: [Rule]? = nil, scope: Scope, tags: [Tag]? = nil, visibilityConfig: VisibilityConfig) {
            self.capacity = capacity
            self.description = description
            self.name = name
            self.rules = rules
            self.scope = scope
            self.tags = tags
            self.visibilityConfig = visibilityConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.capacity, name: "capacity", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.rules?.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.visibilityConfig.validate(name: "\(name).visibilityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
            case description = "Description"
            case name = "Name"
            case rules = "Rules"
            case scope = "Scope"
            case tags = "Tags"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct CreateRuleGroupResponse: AWSDecodableShape {
        /// High-level information about a RuleGroup, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the RuleGroupReferenceStatement to use the rule group in a Rule.
        public let summary: RuleGroupSummary?

        public init(summary: RuleGroupSummary? = nil) {
            self.summary = summary
        }

        private enum CodingKeys: String, CodingKey {
            case summary = "Summary"
        }
    }

    public struct CreateWebACLRequest: AWSEncodableShape {
        /// The action to perform if none of the Rules contained in the WebACL match.
        public let defaultAction: DefaultAction
        /// A description of the Web ACL that helps with identification.
        public let description: String?
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// An array of key:value pairs to associate with the resource.
        public let tags: [Tag]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(defaultAction: DefaultAction, description: String? = nil, name: String, rules: [Rule]? = nil, scope: Scope, tags: [Tag]? = nil, visibilityConfig: VisibilityConfig) {
            self.defaultAction = defaultAction
            self.description = description
            self.name = name
            self.rules = rules
            self.scope = scope
            self.tags = tags
            self.visibilityConfig = visibilityConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.rules?.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.visibilityConfig.validate(name: "\(name).visibilityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultAction = "DefaultAction"
            case description = "Description"
            case name = "Name"
            case rules = "Rules"
            case scope = "Scope"
            case tags = "Tags"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct CreateWebACLResponse: AWSDecodableShape {
        /// High-level information about a WebACL, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a WebACL, and the ARN, that you provide to operations like AssociateWebACL.
        public let summary: WebACLSummary?

        public init(summary: WebACLSummary? = nil) {
            self.summary = summary
        }

        private enum CodingKeys: String, CodingKey {
            case summary = "Summary"
        }
    }

    public struct DefaultAction: AWSEncodableShape & AWSDecodableShape {
        /// Specifies that AWS WAF should allow requests by default.
        public let allow: AllowAction?
        /// Specifies that AWS WAF should block requests by default.
        public let block: BlockAction?

        public init(allow: AllowAction? = nil, block: BlockAction? = nil) {
            self.allow = allow
            self.block = block
        }

        private enum CodingKeys: String, CodingKey {
            case allow = "Allow"
            case block = "Block"
        }
    }

    public struct DeleteFirewallManagerRuleGroupsRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the web ACL.
        public let webACLArn: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let webACLLockToken: String

        public init(webACLArn: String, webACLLockToken: String) {
            self.webACLArn = webACLArn
            self.webACLLockToken = webACLLockToken
        }

        public func validate(name: String) throws {
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, max: 2048)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, min: 20)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, pattern: ".*\\S.*")
            try self.validate(self.webACLLockToken, name: "webACLLockToken", parent: name, max: 36)
            try self.validate(self.webACLLockToken, name: "webACLLockToken", parent: name, min: 1)
            try self.validate(self.webACLLockToken, name: "webACLLockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case webACLArn = "WebACLArn"
            case webACLLockToken = "WebACLLockToken"
        }
    }

    public struct DeleteFirewallManagerRuleGroupsResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let nextWebACLLockToken: String?

        public init(nextWebACLLockToken: String? = nil) {
            self.nextWebACLLockToken = nextWebACLLockToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextWebACLLockToken = "NextWebACLLockToken"
        }
    }

    public struct DeleteIPSetRequest: AWSEncodableShape {
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, lockToken: String, name: String, scope: Scope) {
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct DeleteIPSetResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteLoggingConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the LoggingConfiguration.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct DeleteLoggingConfigurationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeletePermissionPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the rule group from which you want to delete the policy. You must be the owner of the rule group to perform this operation.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct DeletePermissionPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteRegexPatternSetRequest: AWSEncodableShape {
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the set. You cannot change the name after you create the set.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, lockToken: String, name: String, scope: Scope) {
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct DeleteRegexPatternSetResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteRuleGroupRequest: AWSEncodableShape {
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, lockToken: String, name: String, scope: Scope) {
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct DeleteRuleGroupResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteWebACLRequest: AWSEncodableShape {
        /// The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, lockToken: String, name: String, scope: Scope) {
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct DeleteWebACLResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeManagedRuleGroupRequest: AWSEncodableShape {
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        public let vendorName: String

        public init(name: String, scope: Scope, vendorName: String) {
            self.name = name
            self.scope = scope
            self.vendorName = vendorName
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.validate(self.vendorName, name: "vendorName", parent: name, max: 128)
            try self.validate(self.vendorName, name: "vendorName", parent: name, min: 1)
            try self.validate(self.vendorName, name: "vendorName", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scope = "Scope"
            case vendorName = "VendorName"
        }
    }

    public struct DescribeManagedRuleGroupResponse: AWSDecodableShape {
        /// The web ACL capacity units (WCUs) required for this rule group. AWS WAF uses web ACL capacity units (WCU) to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect each rule's relative cost. Rule group capacity is fixed at creation, so users can plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public let capacity: Int64?
        public let rules: [RuleSummary]?

        public init(capacity: Int64? = nil, rules: [RuleSummary]? = nil) {
            self.capacity = capacity
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
            case rules = "Rules"
        }
    }

    public struct DisassociateWebACLRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL.  The ARN must be in one of the following formats:   For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id     For an API Gateway REST API: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name     For an AppSync GraphQL API: arn:aws:appsync:region:account-id:apis/GraphQLApiId
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct DisassociateWebACLResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ExcludedRule: AWSEncodableShape & AWSDecodableShape {
        /// The name of the rule to exclude.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct FieldToMatch: AWSEncodableShape & AWSDecodableShape {
        /// Inspect all query arguments.
        public let allQueryArguments: AllQueryArguments?
        /// Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.  Note that only the first 8 KB (8192 bytes) of the request body are forwarded to AWS WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as ByteMatchStatement or RegexPatternSetReferenceStatement, with a SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. AWS WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.
        public let body: Body?
        /// Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.  Note that only the first 8 KB (8192 bytes) of the request body are forwarded to AWS WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as ByteMatchStatement or RegexPatternSetReferenceStatement, with a SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. AWS WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.
        public let jsonBody: JsonBody?
        /// Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
        public let method: Method?
        /// Inspect the query string. This is the part of a URL that appears after a ? character, if any.
        public let queryString: QueryString?
        /// Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
        public let singleHeader: SingleHeader?
        /// Inspect a single query argument. Provide the name of the query argument to inspect, such as UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.  This is used only to indicate the web request component for AWS WAF to inspect, in the FieldToMatch specification.
        public let singleQueryArgument: SingleQueryArgument?
        /// Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        public let uriPath: UriPath?

        public init(allQueryArguments: AllQueryArguments? = nil, body: Body? = nil, jsonBody: JsonBody? = nil, method: Method? = nil, queryString: QueryString? = nil, singleHeader: SingleHeader? = nil, singleQueryArgument: SingleQueryArgument? = nil, uriPath: UriPath? = nil) {
            self.allQueryArguments = allQueryArguments
            self.body = body
            self.jsonBody = jsonBody
            self.method = method
            self.queryString = queryString
            self.singleHeader = singleHeader
            self.singleQueryArgument = singleQueryArgument
            self.uriPath = uriPath
        }

        public func validate(name: String) throws {
            try self.jsonBody?.validate(name: "\(name).jsonBody")
            try self.singleHeader?.validate(name: "\(name).singleHeader")
            try self.singleQueryArgument?.validate(name: "\(name).singleQueryArgument")
        }

        private enum CodingKeys: String, CodingKey {
            case allQueryArguments = "AllQueryArguments"
            case body = "Body"
            case jsonBody = "JsonBody"
            case method = "Method"
            case queryString = "QueryString"
            case singleHeader = "SingleHeader"
            case singleQueryArgument = "SingleQueryArgument"
            case uriPath = "UriPath"
        }
    }

    public struct FirewallManagerRuleGroup: AWSDecodableShape {
        /// The processing guidance for an AWS Firewall Manager rule. This is like a regular rule Statement, but it can only contain a rule group reference.
        public let firewallManagerStatement: FirewallManagerStatement
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        public let overrideAction: OverrideAction
        /// If you define more than one rule group in the first or last Firewall Manager rule groups, AWS WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.
        public let priority: Int
        public let visibilityConfig: VisibilityConfig

        public init(firewallManagerStatement: FirewallManagerStatement, name: String, overrideAction: OverrideAction, priority: Int, visibilityConfig: VisibilityConfig) {
            self.firewallManagerStatement = firewallManagerStatement
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.visibilityConfig = visibilityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case firewallManagerStatement = "FirewallManagerStatement"
            case name = "Name"
            case overrideAction = "OverrideAction"
            case priority = "Priority"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct FirewallManagerStatement: AWSDecodableShape {
        public let managedRuleGroupStatement: ManagedRuleGroupStatement?
        public let ruleGroupReferenceStatement: RuleGroupReferenceStatement?

        public init(managedRuleGroupStatement: ManagedRuleGroupStatement? = nil, ruleGroupReferenceStatement: RuleGroupReferenceStatement? = nil) {
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
        }

        private enum CodingKeys: String, CodingKey {
            case managedRuleGroupStatement = "ManagedRuleGroupStatement"
            case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
        }
    }

    public struct ForwardedIPConfig: AWSEncodableShape & AWSDecodableShape {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.  If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.  You can specify the following fallback behaviors:    MATCH - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.    NO_MATCH - Treat the web request as not matching the rule statement.
        public let fallbackBehavior: FallbackBehavior
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For.  If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
        public let headerName: String

        public init(fallbackBehavior: FallbackBehavior, headerName: String) {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
        }

        public func validate(name: String) throws {
            try self.validate(self.headerName, name: "headerName", parent: name, max: 255)
            try self.validate(self.headerName, name: "headerName", parent: name, min: 1)
            try self.validate(self.headerName, name: "headerName", parent: name, pattern: "^[a-zA-Z0-9-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case fallbackBehavior = "FallbackBehavior"
            case headerName = "HeaderName"
        }
    }

    public struct GeoMatchStatement: AWSEncodableShape & AWSDecodableShape {
        /// An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the ISO 3166 international standard.
        public let countryCodes: [CountryCode]?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.   If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
        public let forwardedIPConfig: ForwardedIPConfig?

        public init(countryCodes: [CountryCode]? = nil, forwardedIPConfig: ForwardedIPConfig? = nil) {
            self.countryCodes = countryCodes
            self.forwardedIPConfig = forwardedIPConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.countryCodes, name: "countryCodes", parent: name, min: 1)
            try self.forwardedIPConfig?.validate(name: "\(name).forwardedIPConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case countryCodes = "CountryCodes"
            case forwardedIPConfig = "ForwardedIPConfig"
        }
    }

    public struct GetIPSetRequest: AWSEncodableShape {
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, name: String, scope: Scope) {
            self.id = id
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct GetIPSetResponse: AWSDecodableShape {
        public let iPSet: IPSet?
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?

        public init(iPSet: IPSet? = nil, lockToken: String? = nil) {
            self.iPSet = iPSet
            self.lockToken = lockToken
        }

        private enum CodingKeys: String, CodingKey {
            case iPSet = "IPSet"
            case lockToken = "LockToken"
        }
    }

    public struct GetLoggingConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the LoggingConfiguration.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetLoggingConfigurationResponse: AWSDecodableShape {
        /// The LoggingConfiguration for the specified web ACL.
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct GetPermissionPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the rule group for which you want to get the policy.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetPermissionPolicyResponse: AWSDecodableShape {
        /// The IAM policy that is attached to the specified rule group.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct GetRateBasedStatementManagedKeysRequest: AWSEncodableShape {
        /// The name of the rate-based rule to get the keys for.
        public let ruleName: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let webACLId: String
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let webACLName: String

        public init(ruleName: String, scope: Scope, webACLId: String, webACLName: String) {
            self.ruleName = ruleName
            self.scope = scope
            self.webACLId = webACLId
            self.webACLName = webACLName
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleName, name: "ruleName", parent: name, max: 128)
            try self.validate(self.ruleName, name: "ruleName", parent: name, min: 1)
            try self.validate(self.ruleName, name: "ruleName", parent: name, pattern: "^[\\w\\-]+$")
            try self.validate(self.webACLId, name: "webACLId", parent: name, max: 36)
            try self.validate(self.webACLId, name: "webACLId", parent: name, min: 1)
            try self.validate(self.webACLId, name: "webACLId", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.webACLName, name: "webACLName", parent: name, max: 128)
            try self.validate(self.webACLName, name: "webACLName", parent: name, min: 1)
            try self.validate(self.webACLName, name: "webACLName", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
            case scope = "Scope"
            case webACLId = "WebACLId"
            case webACLName = "WebACLName"
        }
    }

    public struct GetRateBasedStatementManagedKeysResponse: AWSDecodableShape {
        /// The keys that are of Internet Protocol version 4 (IPv4).
        public let managedKeysIPV4: RateBasedStatementManagedKeysIPSet?
        /// The keys that are of Internet Protocol version 6 (IPv6).
        public let managedKeysIPV6: RateBasedStatementManagedKeysIPSet?

        public init(managedKeysIPV4: RateBasedStatementManagedKeysIPSet? = nil, managedKeysIPV6: RateBasedStatementManagedKeysIPSet? = nil) {
            self.managedKeysIPV4 = managedKeysIPV4
            self.managedKeysIPV6 = managedKeysIPV6
        }

        private enum CodingKeys: String, CodingKey {
            case managedKeysIPV4 = "ManagedKeysIPV4"
            case managedKeysIPV6 = "ManagedKeysIPV6"
        }
    }

    public struct GetRegexPatternSetRequest: AWSEncodableShape {
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// The name of the set. You cannot change the name after you create the set.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, name: String, scope: Scope) {
            self.id = id
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct GetRegexPatternSetResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        public let regexPatternSet: RegexPatternSet?

        public init(lockToken: String? = nil, regexPatternSet: RegexPatternSet? = nil) {
            self.lockToken = lockToken
            self.regexPatternSet = regexPatternSet
        }

        private enum CodingKeys: String, CodingKey {
            case lockToken = "LockToken"
            case regexPatternSet = "RegexPatternSet"
        }
    }

    public struct GetRuleGroupRequest: AWSEncodableShape {
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, name: String, scope: Scope) {
            self.id = id
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct GetRuleGroupResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        public let ruleGroup: RuleGroup?

        public init(lockToken: String? = nil, ruleGroup: RuleGroup? = nil) {
            self.lockToken = lockToken
            self.ruleGroup = ruleGroup
        }

        private enum CodingKeys: String, CodingKey {
            case lockToken = "LockToken"
            case ruleGroup = "RuleGroup"
        }
    }

    public struct GetSampledRequestsRequest: AWSEncodableShape {
        /// The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests returns information about all of them.
        public let maxItems: Int64
        /// The metric name assigned to the Rule or RuleGroup for which you want a sample of requests.
        public let ruleMetricName: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours. If you specify a start time that's earlier than three hours ago, AWS WAF sets it to three hours ago.
        public let timeWindow: TimeWindow
        /// The Amazon resource name (ARN) of the WebACL for which you want a sample of requests.
        public let webAclArn: String

        public init(maxItems: Int64, ruleMetricName: String, scope: Scope, timeWindow: TimeWindow, webAclArn: String) {
            self.maxItems = maxItems
            self.ruleMetricName = ruleMetricName
            self.scope = scope
            self.timeWindow = timeWindow
            self.webAclArn = webAclArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxItems, name: "maxItems", parent: name, max: 500)
            try self.validate(self.maxItems, name: "maxItems", parent: name, min: 1)
            try self.validate(self.ruleMetricName, name: "ruleMetricName", parent: name, max: 255)
            try self.validate(self.ruleMetricName, name: "ruleMetricName", parent: name, min: 1)
            try self.validate(self.ruleMetricName, name: "ruleMetricName", parent: name, pattern: "^[\\w#:\\.\\-/]+$")
            try self.validate(self.webAclArn, name: "webAclArn", parent: name, max: 2048)
            try self.validate(self.webAclArn, name: "webAclArn", parent: name, min: 20)
            try self.validate(self.webAclArn, name: "webAclArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case ruleMetricName = "RuleMetricName"
            case scope = "Scope"
            case timeWindow = "TimeWindow"
            case webAclArn = "WebAclArn"
        }
    }

    public struct GetSampledRequestsResponse: AWSDecodableShape {
        /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests. If PopulationSize is less than MaxItems, the sample includes every request that your AWS resource received during the specified time range.
        public let populationSize: Int64?
        /// A complex type that contains detailed information about each of the requests in the sample.
        public let sampledRequests: [SampledHTTPRequest]?
        /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However, if your AWS resource received more than 5,000 requests during the time range that you specified in the request, GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
        public let timeWindow: TimeWindow?

        public init(populationSize: Int64? = nil, sampledRequests: [SampledHTTPRequest]? = nil, timeWindow: TimeWindow? = nil) {
            self.populationSize = populationSize
            self.sampledRequests = sampledRequests
            self.timeWindow = timeWindow
        }

        private enum CodingKeys: String, CodingKey {
            case populationSize = "PopulationSize"
            case sampledRequests = "SampledRequests"
            case timeWindow = "TimeWindow"
        }
    }

    public struct GetWebACLForResourceRequest: AWSEncodableShape {
        /// The ARN (Amazon Resource Name) of the resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetWebACLForResourceResponse: AWSDecodableShape {
        /// The Web ACL that is associated with the resource. If there is no associated resource, AWS WAF returns a null Web ACL.
        public let webACL: WebACL?

        public init(webACL: WebACL? = nil) {
            self.webACL = webACL
        }

        private enum CodingKeys: String, CodingKey {
            case webACL = "WebACL"
        }
    }

    public struct GetWebACLRequest: AWSEncodableShape {
        /// The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(id: String, name: String, scope: Scope) {
            self.id = id
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct GetWebACLResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        /// The Web ACL specification. You can modify the settings in this Web ACL and use it to update this Web ACL or create a new one.
        public let webACL: WebACL?

        public init(lockToken: String? = nil, webACL: WebACL? = nil) {
            self.lockToken = lockToken
            self.webACL = webACL
        }

        private enum CodingKeys: String, CodingKey {
            case lockToken = "LockToken"
            case webACL = "WebACL"
        }
    }

    public struct HTTPHeader: AWSDecodableShape {
        /// The name of the HTTP header.
        public let name: String?
        /// The value of the HTTP header.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct HTTPRequest: AWSDecodableShape {
        /// The IP address that the request originated from. If the web ACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:    c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request    x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public let clientIP: String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry ISO 3166-1 alpha-2.
        public let country: String?
        /// A complex type that contains the name and value for each header in the sampled web request.
        public let headers: [HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public let hTTPVersion: String?
        /// The HTTP method specified in the sampled web request.
        public let method: String?
        /// The URI path of the request, which identifies the resource, for example, /images/daily-ad.jpg.
        public let uri: String?

        public init(clientIP: String? = nil, country: String? = nil, headers: [HTTPHeader]? = nil, hTTPVersion: String? = nil, method: String? = nil, uri: String? = nil) {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.hTTPVersion = hTTPVersion
            self.method = method
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case clientIP = "ClientIP"
            case country = "Country"
            case headers = "Headers"
            case hTTPVersion = "HTTPVersion"
            case method = "Method"
            case uri = "URI"
        }
    }

    public struct IPSet: AWSDecodableShape {
        /// Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all address ranges for IP versions IPv4 and IPv6.  Examples:    To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.   To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.   For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing.
        public let addresses: [String]
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String
        /// A description of the IP set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// Specify IPV4 or IPV6.
        public let iPAddressVersion: IPAddressVersion
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String

        public init(addresses: [String], arn: String, description: String? = nil, id: String, iPAddressVersion: IPAddressVersion, name: String) {
            self.addresses = addresses
            self.arn = arn
            self.description = description
            self.id = id
            self.iPAddressVersion = iPAddressVersion
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "Addresses"
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case iPAddressVersion = "IPAddressVersion"
            case name = "Name"
        }
    }

    public struct IPSetForwardedIPConfig: AWSEncodableShape & AWSDecodableShape {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.  If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.  You can specify the following fallback behaviors:    MATCH - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.    NO_MATCH - Treat the web request as not matching the rule statement.
        public let fallbackBehavior: FallbackBehavior
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For.  If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
        public let headerName: String
        /// The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be 10.1.1.1, 127.0.0.0, 10.10.10.10 where the first IP address identifies the original client and the rest identify proxies that the request went through.  The options for this setting are the following:    FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.   LAST - Inspect the last IP address in the list of IP addresses in the header.   ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.
        public let position: ForwardedIPPosition

        public init(fallbackBehavior: FallbackBehavior, headerName: String, position: ForwardedIPPosition) {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
            self.position = position
        }

        public func validate(name: String) throws {
            try self.validate(self.headerName, name: "headerName", parent: name, max: 255)
            try self.validate(self.headerName, name: "headerName", parent: name, min: 1)
            try self.validate(self.headerName, name: "headerName", parent: name, pattern: "^[a-zA-Z0-9-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case fallbackBehavior = "FallbackBehavior"
            case headerName = "HeaderName"
            case position = "Position"
        }
    }

    public struct IPSetReferenceStatement: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the IPSet that this statement references.
        public let arn: String
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.   If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
        public let iPSetForwardedIPConfig: IPSetForwardedIPConfig?

        public init(arn: String, iPSetForwardedIPConfig: IPSetForwardedIPConfig? = nil) {
            self.arn = arn
            self.iPSetForwardedIPConfig = iPSetForwardedIPConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, max: 2048)
            try self.validate(self.arn, name: "arn", parent: name, min: 20)
            try self.validate(self.arn, name: "arn", parent: name, pattern: ".*\\S.*")
            try self.iPSetForwardedIPConfig?.validate(name: "\(name).iPSetForwardedIPConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case iPSetForwardedIPConfig = "IPSetForwardedIPConfig"
        }
    }

    public struct IPSetSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String?
        /// A description of the IP set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String?

        public init(arn: String? = nil, description: String? = nil, id: String? = nil, lockToken: String? = nil, name: String? = nil) {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
        }
    }

    public struct JsonBody: AWSEncodableShape & AWSDecodableShape {
        /// The inspection behavior to fall back to if the JSON in the request body is invalid. For AWS WAF, invalid JSON is any content that isn't complete syntactical JSON, content whose root node isn't an object or an array, and duplicate keys in the content.  You can specify the following fallback behaviors:    MATCH - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.    NO_MATCH - Treat the web request as not matching the rule statement.    EVALUATE_AS_STRING - Inspect the body as plain text. This option applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.    If you don't provide this setting, when AWS WAF encounters invalid JSON, it parses and inspects what it can, up to the first invalid JSON that it encounters.
        public let invalidFallbackBehavior: BodyParsingFallbackBehavior?
        /// The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.
        public let matchPattern: JsonMatchPattern
        /// The parts of the JSON to match against using the MatchPattern. If you specify All, AWS WAF matches against keys and values.
        public let matchScope: JsonMatchScope

        public init(invalidFallbackBehavior: BodyParsingFallbackBehavior? = nil, matchPattern: JsonMatchPattern, matchScope: JsonMatchScope) {
            self.invalidFallbackBehavior = invalidFallbackBehavior
            self.matchPattern = matchPattern
            self.matchScope = matchScope
        }

        public func validate(name: String) throws {
            try self.matchPattern.validate(name: "\(name).matchPattern")
        }

        private enum CodingKeys: String, CodingKey {
            case invalidFallbackBehavior = "InvalidFallbackBehavior"
            case matchPattern = "MatchPattern"
            case matchScope = "MatchScope"
        }
    }

    public struct JsonMatchPattern: AWSEncodableShape & AWSDecodableShape {
        /// Match all of the elements. See also MatchScope in JsonBody.  You must specify either this setting or the IncludedPaths setting, but not both.
        public let all: All?
        /// Match only the specified include paths. See also MatchScope in JsonBody.  Provide the include paths using JSON Pointer syntax. For example, "IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]. For information about this syntax, see the Internet Engineering Task Force (IETF) documentation JavaScript Object Notation (JSON) Pointer.  You must specify either this setting or the All setting, but not both.  Don't use this option to include all paths. Instead, use the All setting.
        public let includedPaths: [String]?

        public init(all: All? = nil, includedPaths: [String]? = nil) {
            self.all = all
            self.includedPaths = includedPaths
        }

        public func validate(name: String) throws {
            try self.includedPaths?.forEach {
                try validate($0, name: "includedPaths[]", parent: name, max: 512)
                try validate($0, name: "includedPaths[]", parent: name, min: 1)
                try validate($0, name: "includedPaths[]", parent: name, pattern: "([/])|([/](([^~])|(~[01]))+)")
            }
            try self.validate(self.includedPaths, name: "includedPaths", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case all = "All"
            case includedPaths = "IncludedPaths"
        }
    }

    public struct ListAvailableManagedRuleGroupsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListAvailableManagedRuleGroupsResponse: AWSDecodableShape {
        public let managedRuleGroups: [ManagedRuleGroupSummary]?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?

        public init(managedRuleGroups: [ManagedRuleGroupSummary]? = nil, nextMarker: String? = nil) {
            self.managedRuleGroups = managedRuleGroups
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case managedRuleGroups = "ManagedRuleGroups"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListIPSetsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListIPSetsResponse: AWSDecodableShape {
        /// Array of IPSets. This may not be the full list of IPSets that you have defined. See the Limit specification for this request.
        public let iPSets: [IPSetSummary]?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?

        public init(iPSets: [IPSetSummary]? = nil, nextMarker: String? = nil) {
            self.iPSets = iPSets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case iPSets = "IPSets"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListLoggingConfigurationsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope?

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListLoggingConfigurationsResponse: AWSDecodableShape {
        public let loggingConfigurations: [LoggingConfiguration]?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?

        public init(loggingConfigurations: [LoggingConfiguration]? = nil, nextMarker: String? = nil) {
            self.loggingConfigurations = loggingConfigurations
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfigurations = "LoggingConfigurations"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRegexPatternSetsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListRegexPatternSetsResponse: AWSDecodableShape {
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        public let regexPatternSets: [RegexPatternSetSummary]?

        public init(nextMarker: String? = nil, regexPatternSets: [RegexPatternSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.regexPatternSets = regexPatternSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case regexPatternSets = "RegexPatternSets"
        }
    }

    public struct ListResourcesForWebACLRequest: AWSEncodableShape {
        /// Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.
        public let resourceType: ResourceType?
        /// The Amazon Resource Name (ARN) of the Web ACL.
        public let webACLArn: String

        public init(resourceType: ResourceType? = nil, webACLArn: String) {
            self.resourceType = resourceType
            self.webACLArn = webACLArn
        }

        public func validate(name: String) throws {
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, max: 2048)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, min: 20)
            try self.validate(self.webACLArn, name: "webACLArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case webACLArn = "WebACLArn"
        }
    }

    public struct ListResourcesForWebACLResponse: AWSDecodableShape {
        /// The array of Amazon Resource Names (ARNs) of the associated resources.
        public let resourceArns: [String]?

        public init(resourceArns: [String]? = nil) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
        }
    }

    public struct ListRuleGroupsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListRuleGroupsResponse: AWSDecodableShape {
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        public let ruleGroups: [RuleGroupSummary]?

        public init(nextMarker: String? = nil, ruleGroups: [RuleGroupSummary]? = nil) {
            self.nextMarker = nextMarker
            self.ruleGroups = ruleGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case ruleGroups = "RuleGroups"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceARN: String

        public init(limit: Int? = nil, nextMarker: String? = nil, resourceARN: String) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 2048)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 20)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// The collection of tagging definitions for the resource.
        public let tagInfoForResource: TagInfoForResource?

        public init(nextMarker: String? = nil, tagInfoForResource: TagInfoForResource? = nil) {
            self.nextMarker = nextMarker
            self.tagInfoForResource = tagInfoForResource
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case tagInfoForResource = "TagInfoForResource"
        }
    }

    public struct ListWebACLsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want AWS WAF to return for this request. If more objects are available, in the response, AWS WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
        public let limit: Int?
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(limit: Int? = nil, nextMarker: String? = nil, scope: Scope) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 256)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case scope = "Scope"
        }
    }

    public struct ListWebACLsResponse: AWSDecodableShape {
        /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, AWS WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
        public let nextMarker: String?
        public let webACLs: [WebACLSummary]?

        public init(nextMarker: String? = nil, webACLs: [WebACLSummary]? = nil) {
            self.nextMarker = nextMarker
            self.webACLs = webACLs
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case webACLs = "WebACLs"
        }
    }

    public struct LoggingConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.
        public let logDestinationConfigs: [String]
        /// Indicates whether the logging configuration was created by AWS Firewall Manager, as part of an AWS WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration.
        public let managedByFirewallManager: Bool?
        /// The parts of the request that you want to keep out of the logs. For example, if you redact the HEADER field, the HEADER field in the firehose will be xxx.   You must use one of the following values: URI, QUERY_STRING, HEADER, or METHOD.
        public let redactedFields: [FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        public let resourceArn: String

        public init(logDestinationConfigs: [String], managedByFirewallManager: Bool? = nil, redactedFields: [FieldToMatch]? = nil, resourceArn: String) {
            self.logDestinationConfigs = logDestinationConfigs
            self.managedByFirewallManager = managedByFirewallManager
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.logDestinationConfigs.forEach {
                try validate($0, name: "logDestinationConfigs[]", parent: name, max: 2048)
                try validate($0, name: "logDestinationConfigs[]", parent: name, min: 20)
                try validate($0, name: "logDestinationConfigs[]", parent: name, pattern: ".*\\S.*")
            }
            try self.validate(self.logDestinationConfigs, name: "logDestinationConfigs", parent: name, max: 100)
            try self.validate(self.logDestinationConfigs, name: "logDestinationConfigs", parent: name, min: 1)
            try self.redactedFields?.forEach {
                try $0.validate(name: "\(name).redactedFields[]")
            }
            try self.validate(self.redactedFields, name: "redactedFields", parent: name, max: 100)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case logDestinationConfigs = "LogDestinationConfigs"
            case managedByFirewallManager = "ManagedByFirewallManager"
            case redactedFields = "RedactedFields"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ManagedRuleGroupStatement: AWSEncodableShape & AWSDecodableShape {
        /// The rules whose actions are set to COUNT by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests.
        public let excludedRules: [ExcludedRule]?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        public let name: String
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        public let vendorName: String

        public init(excludedRules: [ExcludedRule]? = nil, name: String, vendorName: String) {
            self.excludedRules = excludedRules
            self.name = name
            self.vendorName = vendorName
        }

        public func validate(name: String) throws {
            try self.excludedRules?.forEach {
                try $0.validate(name: "\(name).excludedRules[]")
            }
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.validate(self.vendorName, name: "vendorName", parent: name, max: 128)
            try self.validate(self.vendorName, name: "vendorName", parent: name, min: 1)
            try self.validate(self.vendorName, name: "vendorName", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case excludedRules = "ExcludedRules"
            case name = "Name"
            case vendorName = "VendorName"
        }
    }

    public struct ManagedRuleGroupSummary: AWSDecodableShape {
        /// The description of the managed rule group, provided by AWS Managed Rules or the AWS Marketplace seller who manages it.
        public let description: String?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        public let name: String?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        public let vendorName: String?

        public init(description: String? = nil, name: String? = nil, vendorName: String? = nil) {
            self.description = description
            self.name = name
            self.vendorName = vendorName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case vendorName = "VendorName"
        }
    }

    public struct Method: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct NoneAction: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public class NotStatement: AWSEncodableShape & AWSDecodableShape {
        /// The statement to negate. You can use any statement that can be nested.
        public let statement: Statement

        public init(statement: Statement) {
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.statement.validate(name: "\(name).statement")
        }

        private enum CodingKeys: String, CodingKey {
            case statement = "Statement"
        }
    }

    public struct OrStatement: AWSEncodableShape & AWSDecodableShape {
        /// The statements to combine with OR logic. You can use any statements that can be nested.
        public let statements: [Statement]

        public init(statements: [Statement]) {
            self.statements = statements
        }

        public func validate(name: String) throws {
            try self.statements.forEach {
                try $0.validate(name: "\(name).statements[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case statements = "Statements"
        }
    }

    public struct OverrideAction: AWSEncodableShape & AWSDecodableShape {
        /// Override the rule action setting to count.
        public let count: CountAction?
        /// Don't override the rule action setting.
        public let none: NoneAction?

        public init(count: CountAction? = nil, none: NoneAction? = nil) {
            self.count = count
            self.none = none
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case none = "None"
        }
    }

    public struct PutLoggingConfigurationRequest: AWSEncodableShape {
        public let loggingConfiguration: LoggingConfiguration

        public init(loggingConfiguration: LoggingConfiguration) {
            self.loggingConfiguration = loggingConfiguration
        }

        public func validate(name: String) throws {
            try self.loggingConfiguration.validate(name: "\(name).loggingConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct PutLoggingConfigurationResponse: AWSDecodableShape {
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct PutPermissionPolicyRequest: AWSEncodableShape {
        /// The policy to attach to the specified rule group.  The policy specifications must conform to the following:   The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.   The policy must include specifications for Effect, Action, and Principal.    Effect must specify Allow.    Action must specify wafv2:CreateWebACL, wafv2:UpdateWebACL, and wafv2:PutFirewallManagerRuleGroups. AWS WAF rejects any extra actions or wildcard actions in the policy.   The policy must not include a Resource parameter.   For more information, see IAM Policies.
        public let policy: String
        /// The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.
        public let resourceArn: String

        public init(policy: String, resourceArn: String) {
            self.policy = policy
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.policy, name: "policy", parent: name, max: 395_000)
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, pattern: ".*\\S.*")
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case resourceArn = "ResourceArn"
        }
    }

    public struct PutPermissionPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct QueryString: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public class RateBasedStatement: AWSEncodableShape & AWSDecodableShape {
        /// Setting that indicates how to aggregate the request counts. The options are the following:   IP - Aggregate the request counts on the IP address from the web request origin.   FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ForwardedIPConfig, to specify the header to use.
        public let aggregateKeyType: RateBasedStatementAggregateKeyType
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.   If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.  This is required if AggregateKeyType is set to FORWARDED_IP.
        public let forwardedIPConfig: ForwardedIPConfig?
        /// The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ScopeDownStatement, this limit is applied only to the requests that match the statement.
        public let limit: Int64
        /// An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement.
        public let scopeDownStatement: Statement?

        public init(aggregateKeyType: RateBasedStatementAggregateKeyType, forwardedIPConfig: ForwardedIPConfig? = nil, limit: Int64, scopeDownStatement: Statement? = nil) {
            self.aggregateKeyType = aggregateKeyType
            self.forwardedIPConfig = forwardedIPConfig
            self.limit = limit
            self.scopeDownStatement = scopeDownStatement
        }

        public func validate(name: String) throws {
            try self.forwardedIPConfig?.validate(name: "\(name).forwardedIPConfig")
            try self.validate(self.limit, name: "limit", parent: name, max: 2_000_000_000)
            try self.validate(self.limit, name: "limit", parent: name, min: 100)
            try self.scopeDownStatement?.validate(name: "\(name).scopeDownStatement")
        }

        private enum CodingKeys: String, CodingKey {
            case aggregateKeyType = "AggregateKeyType"
            case forwardedIPConfig = "ForwardedIPConfig"
            case limit = "Limit"
            case scopeDownStatement = "ScopeDownStatement"
        }
    }

    public struct RateBasedStatementManagedKeysIPSet: AWSDecodableShape {
        /// The IP addresses that are currently blocked.
        public let addresses: [String]?
        public let iPAddressVersion: IPAddressVersion?

        public init(addresses: [String]? = nil, iPAddressVersion: IPAddressVersion? = nil) {
            self.addresses = addresses
            self.iPAddressVersion = iPAddressVersion
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "Addresses"
            case iPAddressVersion = "IPAddressVersion"
        }
    }

    public struct Regex: AWSEncodableShape & AWSDecodableShape {
        /// The string representing the regular expression.
        public let regexString: String?

        public init(regexString: String? = nil) {
            self.regexString = regexString
        }

        public func validate(name: String) throws {
            try self.validate(self.regexString, name: "regexString", parent: name, max: 512)
            try self.validate(self.regexString, name: "regexString", parent: name, min: 1)
            try self.validate(self.regexString, name: "regexString", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case regexString = "RegexString"
        }
    }

    public struct RegexPatternSet: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String?
        /// A description of the set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// The name of the set. You cannot change the name after you create the set.
        public let name: String?
        /// The regular expression patterns in the set.
        public let regularExpressionList: [Regex]?

        public init(arn: String? = nil, description: String? = nil, id: String? = nil, name: String? = nil, regularExpressionList: [Regex]? = nil) {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
            self.regularExpressionList = regularExpressionList
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case regularExpressionList = "RegularExpressionList"
        }
    }

    public struct RegexPatternSetReferenceStatement: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the RegexPatternSet that this statement references.
        public let arn: String
        /// The part of a web request that you want AWS WAF to inspect. For more information, see FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        public let textTransformations: [TextTransformation]

        public init(arn: String, fieldToMatch: FieldToMatch, textTransformations: [TextTransformation]) {
            self.arn = arn
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, max: 2048)
            try self.validate(self.arn, name: "arn", parent: name, min: 20)
            try self.validate(self.arn, name: "arn", parent: name, pattern: ".*\\S.*")
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.textTransformations.forEach {
                try $0.validate(name: "\(name).textTransformations[]")
            }
            try self.validate(self.textTransformations, name: "textTransformations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case fieldToMatch = "FieldToMatch"
            case textTransformations = "TextTransformations"
        }
    }

    public struct RegexPatternSetSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String?
        /// A description of the set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public let name: String?

        public init(arn: String? = nil, description: String? = nil, id: String? = nil, lockToken: String? = nil, name: String? = nil) {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
        }
    }

    public struct Rule: AWSEncodableShape & AWSDecodableShape {
        /// The action that AWS WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting.  This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include RuleGroupReferenceStatement and ManagedRuleGroupStatement.  You must specify either this Action setting or the rule OverrideAction setting, but not both:   If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.    If the rule statement references a rule group, use the override action setting and not this action setting.
        public let action: RuleAction?
        /// The name of the rule. You can't change the name of a Rule after you create it.
        public let name: String
        /// The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement.  Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings.  In a Rule, you must specify either this OverrideAction setting or the rule Action setting, but not both:   If the rule statement references a rule group, use this override action setting and not the action setting.    If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.
        public let overrideAction: OverrideAction?
        /// If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the Rules in order based on the value of Priority. AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.
        public let priority: Int
        /// The AWS WAF processing statement for the rule, for example ByteMatchStatement or SizeConstraintStatement.
        public let statement: Statement
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(action: RuleAction? = nil, name: String, overrideAction: OverrideAction? = nil, priority: Int, statement: Statement, visibilityConfig: VisibilityConfig) {
            self.action = action
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.statement = statement
            self.visibilityConfig = visibilityConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.validate(self.priority, name: "priority", parent: name, min: 0)
            try self.statement.validate(name: "\(name).statement")
            try self.visibilityConfig.validate(name: "\(name).visibilityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case name = "Name"
            case overrideAction = "OverrideAction"
            case priority = "Priority"
            case statement = "Statement"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct RuleAction: AWSEncodableShape & AWSDecodableShape {
        /// Instructs AWS WAF to allow the web request.
        public let allow: AllowAction?
        /// Instructs AWS WAF to block the web request.
        public let block: BlockAction?
        /// Instructs AWS WAF to count the web request and allow it.
        public let count: CountAction?

        public init(allow: AllowAction? = nil, block: BlockAction? = nil, count: CountAction? = nil) {
            self.allow = allow
            self.block = block
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case allow = "Allow"
            case block = "Block"
            case count = "Count"
        }
    }

    public struct RuleGroup: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String
        /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit. You can check the capacity for a set of rules using CheckCapacity. AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public let capacity: Int64
        /// A description of the rule group that helps with identification.
        public let description: String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(arn: String, capacity: Int64, description: String? = nil, id: String, name: String, rules: [Rule]? = nil, visibilityConfig: VisibilityConfig) {
            self.arn = arn
            self.capacity = capacity
            self.description = description
            self.id = id
            self.name = name
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case capacity = "Capacity"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case rules = "Rules"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct RuleGroupReferenceStatement: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String
        /// The names of rules that are in the referenced rule group, but that you want AWS WAF to exclude from processing for this rule statement.
        public let excludedRules: [ExcludedRule]?

        public init(arn: String, excludedRules: [ExcludedRule]? = nil) {
            self.arn = arn
            self.excludedRules = excludedRules
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, max: 2048)
            try self.validate(self.arn, name: "arn", parent: name, min: 20)
            try self.validate(self.arn, name: "arn", parent: name, pattern: ".*\\S.*")
            try self.excludedRules?.forEach {
                try $0.validate(name: "\(name).excludedRules[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case excludedRules = "ExcludedRules"
        }
    }

    public struct RuleGroupSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String?
        /// A description of the rule group that helps with identification.
        public let description: String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public let name: String?

        public init(arn: String? = nil, description: String? = nil, id: String? = nil, lockToken: String? = nil, name: String? = nil) {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
        }
    }

    public struct RuleSummary: AWSDecodableShape {
        public let action: RuleAction?
        /// The name of the rule.
        public let name: String?

        public init(action: RuleAction? = nil, name: String? = nil) {
            self.action = action
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case name = "Name"
        }
    }

    public struct SampledHTTPRequest: AWSDecodableShape {
        /// The action for the Rule that the request matched: ALLOW, BLOCK, or COUNT.
        public let action: String?
        /// A complex type that contains detailed information about the request.
        public let request: HTTPRequest
        /// The name of the Rule that the request matched. For managed rule groups, the format for this name is &lt;vendor name&gt;#&lt;managed rule group name&gt;#&lt;rule name&gt;. For your own rule groups, the format for this name is &lt;rule group name&gt;#&lt;rule name&gt;. If the rule is not in a rule group, this field is absent.
        public let ruleNameWithinRuleGroup: String?
        /// The time at which AWS WAF received the request from your AWS resource, in Unix time format (in seconds).
        public let timestamp: Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response. For example, a result that has a weight of 2 represents roughly twice as many web requests as a result that has a weight of 1.
        public let weight: Int64

        public init(action: String? = nil, request: HTTPRequest, ruleNameWithinRuleGroup: String? = nil, timestamp: Date? = nil, weight: Int64) {
            self.action = action
            self.request = request
            self.ruleNameWithinRuleGroup = ruleNameWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case request = "Request"
            case ruleNameWithinRuleGroup = "RuleNameWithinRuleGroup"
            case timestamp = "Timestamp"
            case weight = "Weight"
        }
    }

    public struct SingleHeader: AWSEncodableShape & AWSDecodableShape {
        /// The name of the query header to inspect.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct SingleQueryArgument: AWSEncodableShape & AWSDecodableShape {
        /// The name of the query argument to inspect.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct SizeConstraintStatement: AWSEncodableShape & AWSDecodableShape {
        /// The operator to use to compare the request part to the size setting.
        public let comparisonOperator: ComparisonOperator
        /// The part of a web request that you want AWS WAF to inspect. For more information, see FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// The size, in byte, to compare to the request part, after any transformations.
        public let size: Int64
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        public let textTransformations: [TextTransformation]

        public init(comparisonOperator: ComparisonOperator, fieldToMatch: FieldToMatch, size: Int64, textTransformations: [TextTransformation]) {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformations = textTransformations
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.validate(self.size, name: "size", parent: name, max: 21_474_836_480)
            try self.validate(self.size, name: "size", parent: name, min: 0)
            try self.textTransformations.forEach {
                try $0.validate(name: "\(name).textTransformations[]")
            }
            try self.validate(self.textTransformations, name: "textTransformations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case fieldToMatch = "FieldToMatch"
            case size = "Size"
            case textTransformations = "TextTransformations"
        }
    }

    public struct SqliMatchStatement: AWSEncodableShape & AWSDecodableShape {
        /// The part of a web request that you want AWS WAF to inspect. For more information, see FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        public let textTransformations: [TextTransformation]

        public init(fieldToMatch: FieldToMatch, textTransformations: [TextTransformation]) {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.textTransformations.forEach {
                try $0.validate(name: "\(name).textTransformations[]")
            }
            try self.validate(self.textTransformations, name: "textTransformations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case textTransformations = "TextTransformations"
        }
    }

    public class Statement: AWSEncodableShape & AWSDecodableShape {
        /// A logical rule statement used to combine other rule statements with AND logic. You provide more than one Statement within the AndStatement.
        public let andStatement: AndStatement?
        /// A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is refered to as a string match statement.
        public let byteMatchStatement: ByteMatchStatement?
        /// A rule statement used to identify web requests based on country of origin.
        public let geoMatchStatement: GeoMatchStatement?
        /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see CreateIPSet. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
        public let iPSetReferenceStatement: IPSetReferenceStatement?
        /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling ListAvailableManagedRuleGroups. You can't nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule.
        public let managedRuleGroupStatement: ManagedRuleGroupStatement?
        /// A logical rule statement used to negate the results of another rule statement. You provide one Statement within the NotStatement.
        public let notStatement: NotStatement?
        /// A logical rule statement used to combine other rule statements with OR logic. You provide more than one Statement within the OrStatement.
        public let orStatement: OrStatement?
        /// A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. When the rule action triggers, AWS WAF blocks additional requests from the IP address until the request rate falls below the limit. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:   An IP match statement with an IP set that specified the address 192.0.2.44.   A string match statement that searches in the User-Agent header for the string BadBot.   In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule. You cannot nest a RateBasedStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule.
        public let rateBasedStatement: RateBasedStatement?
        /// A rule statement used to search web request components for matches with regular expressions. To use this, create a RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see CreateRegexPatternSet. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
        public let regexPatternSetReferenceStatement: RegexPatternSetReferenceStatement?
        /// A rule statement used to run the rules that are defined in a RuleGroup. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule.
        public let ruleGroupReferenceStatement: RuleGroupReferenceStatement?
        /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes.  If you configure AWS WAF to inspect the request body, AWS WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
        public let sizeConstraintStatement: SizeConstraintStatement?
        /// Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.
        public let sqliMatchStatement: SqliMatchStatement?
        /// A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want AWS WAF to search and text transformations to use on the search area before AWS WAF searches for character sequences that are likely to be malicious strings.
        public let xssMatchStatement: XssMatchStatement?

        public init(andStatement: AndStatement? = nil, byteMatchStatement: ByteMatchStatement? = nil, geoMatchStatement: GeoMatchStatement? = nil, iPSetReferenceStatement: IPSetReferenceStatement? = nil, managedRuleGroupStatement: ManagedRuleGroupStatement? = nil, notStatement: NotStatement? = nil, orStatement: OrStatement? = nil, rateBasedStatement: RateBasedStatement? = nil, regexPatternSetReferenceStatement: RegexPatternSetReferenceStatement? = nil, ruleGroupReferenceStatement: RuleGroupReferenceStatement? = nil, sizeConstraintStatement: SizeConstraintStatement? = nil, sqliMatchStatement: SqliMatchStatement? = nil, xssMatchStatement: XssMatchStatement? = nil) {
            self.andStatement = andStatement
            self.byteMatchStatement = byteMatchStatement
            self.geoMatchStatement = geoMatchStatement
            self.iPSetReferenceStatement = iPSetReferenceStatement
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.notStatement = notStatement
            self.orStatement = orStatement
            self.rateBasedStatement = rateBasedStatement
            self.regexPatternSetReferenceStatement = regexPatternSetReferenceStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
            self.sizeConstraintStatement = sizeConstraintStatement
            self.sqliMatchStatement = sqliMatchStatement
            self.xssMatchStatement = xssMatchStatement
        }

        public func validate(name: String) throws {
            try self.andStatement?.validate(name: "\(name).andStatement")
            try self.byteMatchStatement?.validate(name: "\(name).byteMatchStatement")
            try self.geoMatchStatement?.validate(name: "\(name).geoMatchStatement")
            try self.iPSetReferenceStatement?.validate(name: "\(name).iPSetReferenceStatement")
            try self.managedRuleGroupStatement?.validate(name: "\(name).managedRuleGroupStatement")
            try self.notStatement?.validate(name: "\(name).notStatement")
            try self.orStatement?.validate(name: "\(name).orStatement")
            try self.rateBasedStatement?.validate(name: "\(name).rateBasedStatement")
            try self.regexPatternSetReferenceStatement?.validate(name: "\(name).regexPatternSetReferenceStatement")
            try self.ruleGroupReferenceStatement?.validate(name: "\(name).ruleGroupReferenceStatement")
            try self.sizeConstraintStatement?.validate(name: "\(name).sizeConstraintStatement")
            try self.sqliMatchStatement?.validate(name: "\(name).sqliMatchStatement")
            try self.xssMatchStatement?.validate(name: "\(name).xssMatchStatement")
        }

        private enum CodingKeys: String, CodingKey {
            case andStatement = "AndStatement"
            case byteMatchStatement = "ByteMatchStatement"
            case geoMatchStatement = "GeoMatchStatement"
            case iPSetReferenceStatement = "IPSetReferenceStatement"
            case managedRuleGroupStatement = "ManagedRuleGroupStatement"
            case notStatement = "NotStatement"
            case orStatement = "OrStatement"
            case rateBasedStatement = "RateBasedStatement"
            case regexPatternSetReferenceStatement = "RegexPatternSetReferenceStatement"
            case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
            case sizeConstraintStatement = "SizeConstraintStatement"
            case sqliMatchStatement = "SqliMatchStatement"
            case xssMatchStatement = "XssMatchStatement"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        public let key: String
        /// Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, min: 0)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagInfoForResource: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceARN: String?
        /// The array of Tag objects defined for the resource.
        public let tagList: [Tag]?

        public init(resourceARN: String? = nil, tagList: [Tag]? = nil) {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagList = "TagList"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceARN: String
        /// An array of key:value pairs to associate with the resource.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 2048)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 20)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TextTransformation: AWSEncodableShape & AWSDecodableShape {
        /// Sets the relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.
        public let priority: Int
        /// You can specify the following transformation types:  CMD_LINE  When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:   Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)    COMPRESS_WHITE_SPACE  Use this option to replace the following characters with a space character (decimal 32):   \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160    COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.  HTML_ENTITY_DECODE  Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:   Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with &gt;    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters    LOWERCASE  Use this option to convert uppercase letters (A-Z) to lowercase (a-z).  URL_DECODE  Use this option to decode a URL-encoded value.  NONE  Specify NONE if you don't want any text transformations.
        public let type: TextTransformationType

        public init(priority: Int, type: TextTransformationType) {
            self.priority = priority
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.priority, name: "priority", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case type = "Type"
        }
    }

    public struct TimeWindow: AWSEncodableShape & AWSDecodableShape {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        public let endTime: Date
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        public let startTime: Date

        public init(endTime: Date, startTime: Date) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceARN: String
        /// An array of keys identifying the tags to disassociate from the resource.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 2048)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 20)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateIPSetRequest: AWSEncodableShape {
        /// Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all address ranges for IP versions IPv4 and IPv6.  Examples:    To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.   To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.   For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing.
        public let addresses: [String]
        /// A description of the IP set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public let name: String
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(addresses: [String], description: String? = nil, id: String, lockToken: String, name: String, scope: Scope) {
            self.addresses = addresses
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.addresses.forEach {
                try validate($0, name: "addresses[]", parent: name, max: 50)
                try validate($0, name: "addresses[]", parent: name, min: 1)
                try validate($0, name: "addresses[]", parent: name, pattern: ".*\\S.*")
            }
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "Addresses"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case scope = "Scope"
        }
    }

    public struct UpdateIPSetResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
        public let nextLockToken: String?

        public init(nextLockToken: String? = nil) {
            self.nextLockToken = nextLockToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextLockToken = "NextLockToken"
        }
    }

    public struct UpdateRegexPatternSetRequest: AWSEncodableShape {
        /// A description of the set that helps with identification.
        public let description: String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the set. You cannot change the name after you create the set.
        public let name: String
        public let regularExpressionList: [Regex]
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope

        public init(description: String? = nil, id: String, lockToken: String, name: String, regularExpressionList: [Regex], scope: Scope) {
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.regularExpressionList = regularExpressionList
            self.scope = scope
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.regularExpressionList.forEach {
                try $0.validate(name: "\(name).regularExpressionList[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case regularExpressionList = "RegularExpressionList"
            case scope = "Scope"
        }
    }

    public struct UpdateRegexPatternSetResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
        public let nextLockToken: String?

        public init(nextLockToken: String? = nil) {
            self.nextLockToken = nextLockToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextLockToken = "NextLockToken"
        }
    }

    public struct UpdateRuleGroupRequest: AWSEncodableShape {
        /// A description of the rule group that helps with identification.
        public let description: String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        public let name: String
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(description: String? = nil, id: String, lockToken: String, name: String, rules: [Rule]? = nil, scope: Scope, visibilityConfig: VisibilityConfig) {
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.rules = rules
            self.scope = scope
            self.visibilityConfig = visibilityConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.rules?.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.visibilityConfig.validate(name: "\(name).visibilityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case rules = "Rules"
            case scope = "Scope"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct UpdateRuleGroupResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
        public let nextLockToken: String?

        public init(nextLockToken: String? = nil) {
            self.nextLockToken = nextLockToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextLockToken = "NextLockToken"
        }
    }

    public struct UpdateWebACLRequest: AWSEncodableShape {
        /// The action to perform if none of the Rules contained in the WebACL match.
        public let defaultAction: DefaultAction
        /// A description of the Web ACL that helps with identification.
        public let description: String?
        /// The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint us-east-1.
        public let scope: Scope
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(defaultAction: DefaultAction, description: String? = nil, id: String, lockToken: String, name: String, rules: [Rule]? = nil, scope: Scope, visibilityConfig: VisibilityConfig) {
            self.defaultAction = defaultAction
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
            self.rules = rules
            self.scope = scope
            self.visibilityConfig = visibilityConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$")
            try self.validate(self.id, name: "id", parent: name, max: 36)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.lockToken, name: "lockToken", parent: name, max: 36)
            try self.validate(self.lockToken, name: "lockToken", parent: name, min: 1)
            try self.validate(self.lockToken, name: "lockToken", parent: name, pattern: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[\\w\\-]+$")
            try self.rules?.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.visibilityConfig.validate(name: "\(name).visibilityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultAction = "DefaultAction"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
            case rules = "Rules"
            case scope = "Scope"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct UpdateWebACLResponse: AWSDecodableShape {
        /// A token used for optimistic locking. AWS WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
        public let nextLockToken: String?

        public init(nextLockToken: String? = nil) {
            self.nextLockToken = nextLockToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextLockToken = "NextLockToken"
        }
    }

    public struct UriPath: AWSEncodableShape & AWSDecodableShape {
        public init() {}
    }

    public struct VisibilityConfig: AWSEncodableShape & AWSDecodableShape {
        /// A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see AWS WAF Metrics.
        public let cloudWatchMetricsEnabled: Bool
        /// A name of the CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for AWS WAF, for example "All" and "Default_Action."
        public let metricName: String
        /// A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
        public let sampledRequestsEnabled: Bool

        public init(cloudWatchMetricsEnabled: Bool, metricName: String, sampledRequestsEnabled: Bool) {
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
            self.metricName = metricName
            self.sampledRequestsEnabled = sampledRequestsEnabled
        }

        public func validate(name: String) throws {
            try self.validate(self.metricName, name: "metricName", parent: name, max: 255)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: "^[\\w#:\\.\\-/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
            case metricName = "MetricName"
            case sampledRequestsEnabled = "SampledRequestsEnabled"
        }
    }

    public struct WebACL: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Web ACL that you want to associate with the resource.
        public let arn: String
        /// The web ACL capacity units (WCUs) currently being used by this web ACL.  AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public let capacity: Int64?
        /// The action to perform if none of the Rules contained in the WebACL match.
        public let defaultAction: DefaultAction
        /// A description of the Web ACL that helps with identification.
        public let description: String?
        /// A unique identifier for the WebACL. This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a WebACL.
        public let id: String
        /// Indicates whether this web ACL is managed by AWS Firewall Manager. If true, then only AWS Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL.
        public let managedByFirewallManager: Bool?
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String
        /// The last set of rules for AWS WAF to process in the web ACL. This is defined in an AWS Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized before these.  In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public let postProcessFirewallManagerRuleGroups: [FirewallManagerRuleGroup]?
        /// The first set of rules for AWS WAF to process in the web ACL. This is defined in an AWS Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized after these.  In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public let preProcessFirewallManagerRuleGroups: [FirewallManagerRuleGroup]?
        /// The Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.
        public let rules: [Rule]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        public let visibilityConfig: VisibilityConfig

        public init(arn: String, capacity: Int64? = nil, defaultAction: DefaultAction, description: String? = nil, id: String, managedByFirewallManager: Bool? = nil, name: String, postProcessFirewallManagerRuleGroups: [FirewallManagerRuleGroup]? = nil, preProcessFirewallManagerRuleGroups: [FirewallManagerRuleGroup]? = nil, rules: [Rule]? = nil, visibilityConfig: VisibilityConfig) {
            self.arn = arn
            self.capacity = capacity
            self.defaultAction = defaultAction
            self.description = description
            self.id = id
            self.managedByFirewallManager = managedByFirewallManager
            self.name = name
            self.postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups
            self.preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case capacity = "Capacity"
            case defaultAction = "DefaultAction"
            case description = "Description"
            case id = "Id"
            case managedByFirewallManager = "ManagedByFirewallManager"
            case name = "Name"
            case postProcessFirewallManagerRuleGroups = "PostProcessFirewallManagerRuleGroups"
            case preProcessFirewallManagerRuleGroups = "PreProcessFirewallManagerRuleGroups"
            case rules = "Rules"
            case visibilityConfig = "VisibilityConfig"
        }
    }

    public struct WebACLSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the entity.
        public let arn: String?
        /// A description of the Web ACL that helps with identification.
        public let description: String?
        /// The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public let lockToken: String?
        /// The name of the Web ACL. You cannot change the name of a Web ACL after you create it.
        public let name: String?

        public init(arn: String? = nil, description: String? = nil, id: String? = nil, lockToken: String? = nil, name: String? = nil) {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
            case lockToken = "LockToken"
            case name = "Name"
        }
    }

    public struct XssMatchStatement: AWSEncodableShape & AWSDecodableShape {
        /// The part of a web request that you want AWS WAF to inspect. For more information, see FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        public let textTransformations: [TextTransformation]

        public init(fieldToMatch: FieldToMatch, textTransformations: [TextTransformation]) {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.textTransformations.forEach {
                try $0.validate(name: "\(name).textTransformations[]")
            }
            try self.validate(self.textTransformations, name: "textTransformations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case textTransformations = "TextTransformations"
        }
    }
}
